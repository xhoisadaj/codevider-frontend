{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useFetch = (apiPath, queryTerm = \"\") => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(\"\");\n  const clearError = useCallback(() => {\n    setError(\"\");\n  }, []);\n  useEffect(() => {\n    const url = `https://freetestapi.com/api/v1/${apiPath}?limit=6&search=${queryTerm}`;\n    async function fetchAnimals() {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.length === 0) {\n          setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n        } else {\n          setError(\"\");\n        }\n        console.log(url);\n        setData(data);\n      } catch (error) {\n        console.error(error);\n        setError(\"An error occurred while fetching data.\");\n      }\n    }\n    fetchAnimals();\n  }, [apiPath, queryTerm]);\n  useEffect(() => {\n    // Clear the error when the apiPath changes\n    clearError();\n  }, [apiPath, clearError]);\n  return {\n    data,\n    error,\n    clearError\n  };\n};\n_s(useFetch, \"yG8dNZyoAqn1NFoamAMzEGS0lMU=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useFetch","apiPath","queryTerm","_s","data","setData","error","setError","clearError","url","fetchAnimals","response","fetch","json","length","console","log"],"sources":["/Users/xhoanisadaj/Documents/projects/codevider/codevider/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useFetch = (apiPath, queryTerm = \"\") => {\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(\"\");\n\n    const clearError = useCallback(() => {\n        setError(\"\");\n    }, []);\n\n    useEffect(() => {\n        const url = `https://freetestapi.com/api/v1/${apiPath}?limit=6&search=${queryTerm}`;\n\n        async function fetchAnimals() {\n            try {\n                const response = await fetch(url);\n                const data = await response.json();\n                if (data.length === 0) {\n                    setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n                } else {\n                    setError(\"\");\n                }\n                console.log(url);\n                setData(data);\n            } catch (error) {\n                console.error(error);\n                setError(\"An error occurred while fetching data.\");\n            }\n        }\n\n        fetchAnimals();\n    }, [apiPath, queryTerm]);\n\n    useEffect(() => {\n        // Clear the error when the apiPath changes\n        clearError();\n    }, [apiPath, clearError]);\n\n    return { data, error, clearError };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,OAAO,EAAEC,SAAS,GAAG,EAAE,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,UAAU,GAAGT,WAAW,CAAC,MAAM;IACjCQ,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENT,SAAS,CAAC,MAAM;IACZ,MAAMW,GAAG,GAAG,kCAAkCR,OAAO,mBAAmBC,SAAS,EAAE;IAEnF,eAAeQ,YAAYA,CAAA,EAAG;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;QACjC,MAAML,IAAI,GAAG,MAAMO,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAIT,IAAI,CAACU,MAAM,KAAK,CAAC,EAAE;UACnBP,QAAQ,CAAC,iDAAiD,CAAC;QAC/D,CAAC,MAAM;UACHA,QAAQ,CAAC,EAAE,CAAC;QAChB;QACAQ,OAAO,CAACC,GAAG,CAACP,GAAG,CAAC;QAChBJ,OAAO,CAACD,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAAC,wCAAwC,CAAC;MACtD;IACJ;IAEAG,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACT,OAAO,EAAEC,SAAS,CAAC,CAAC;EAExBJ,SAAS,CAAC,MAAM;IACZ;IACAU,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACP,OAAO,EAAEO,UAAU,CAAC,CAAC;EAEzB,OAAO;IAAEJ,IAAI;IAAEE,KAAK;IAAEE;EAAW,CAAC;AACtC,CAAC;AAACL,EAAA,CArCWH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}