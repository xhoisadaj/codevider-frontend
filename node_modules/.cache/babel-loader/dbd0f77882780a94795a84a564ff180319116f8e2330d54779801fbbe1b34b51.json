{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useAnimalData = apiPath => {\n  _s();\n  const [data, setData] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [searchError, setSearchError] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  // Effect for fetching data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const url = `https://freetestapi.com/api/v1/${apiPath}?limit=6`;\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.length === 0) {\n          setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n        } else {\n          setError(\"\");\n        }\n        setData(data);\n      } catch (error) {\n        console.error(\"An error occurred while fetching data.\");\n        setError(\"An error occurred while fetching data.\");\n      }\n    };\n    fetchData();\n  }, [apiPath]);\n\n  // Effect for searching\n  useEffect(() => {\n    if (!query) {\n      setSearchResults([]);\n      setSearchError(\"\");\n      return;\n    }\n    try {\n      const results = data.filter(animal => animal.name.toLowerCase().includes(query.toLowerCase()));\n      if (results.length === 0) {\n        setSearchError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n      } else {\n        setSearchError(\"\");\n      }\n      setSearchResults(results);\n    } catch (error) {\n      console.error(\"An error occurred while searching.\");\n      setSearchError(\"An error occurred while searching.\");\n    }\n  }, [query, data]);\n  const search = query => {\n    setQuery(query);\n  };\n  return {\n    data,\n    searchResults,\n    error,\n    searchError,\n    search\n  };\n};\n_s(useAnimalData, \"25BVPMb2ke/xXOrLk1Mm+dXkEOU=\");","map":{"version":3,"names":["useState","useEffect","useAnimalData","apiPath","_s","data","setData","searchResults","setSearchResults","error","setError","searchError","setSearchError","query","setQuery","fetchData","url","response","fetch","json","length","console","results","filter","animal","name","toLowerCase","includes","search"],"sources":["/Users/xhoanisadaj/Documents/projects/codevider/codevider/src/hooks/useAnimalData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useAnimalData = (apiPath) => {\n    const [data, setData] = useState([]);\n    const [searchResults, setSearchResults] = useState([]);\n    const [error, setError] = useState(\"\");\n    const [searchError, setSearchError] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n\n    // Effect for fetching data\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const url = `https://freetestapi.com/api/v1/${apiPath}?limit=6`;\n                const response = await fetch(url);\n                const data = await response.json();\n                if (data.length === 0) {\n                    setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n                } else {\n                    setError(\"\");\n                }\n                setData(data);\n            } catch (error) {\n                console.error(\"An error occurred while fetching data.\");\n                setError(\"An error occurred while fetching data.\");\n            }\n        };\n\n        fetchData();\n    }, [apiPath]);\n\n    // Effect for searching\n    useEffect(() => {\n        if (!query) {\n            setSearchResults([]);\n            setSearchError(\"\");\n            return;\n        }\n\n        try {\n            const results = data.filter(animal => animal.name.toLowerCase().includes(query.toLowerCase()));\n            if (results.length === 0) {\n                setSearchError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n            } else {\n                setSearchError(\"\");\n            }\n            setSearchResults(results);\n        } catch (error) {\n            console.error(\"An error occurred while searching.\");\n            setSearchError(\"An error occurred while searching.\");\n        }\n    }, [query, data]);\n\n    const search = (query) => {\n        setQuery(query);\n    };\n\n    return { data, searchResults, error, searchError, search };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,GAAG,GAAG,kCAAkCb,OAAO,UAAU;QAC/D,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;QACjC,MAAMX,IAAI,GAAG,MAAMY,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAId,IAAI,CAACe,MAAM,KAAK,CAAC,EAAE;UACnBV,QAAQ,CAAC,iDAAiD,CAAC;QAC/D,CAAC,MAAM;UACHA,QAAQ,CAAC,EAAE,CAAC;QAChB;QACAJ,OAAO,CAACD,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZY,OAAO,CAACZ,KAAK,CAAC,wCAAwC,CAAC;QACvDC,QAAQ,CAAC,wCAAwC,CAAC;MACtD;IACJ,CAAC;IAEDK,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACZ,OAAO,CAAC,CAAC;;EAEb;EACAF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACY,KAAK,EAAE;MACRL,gBAAgB,CAAC,EAAE,CAAC;MACpBI,cAAc,CAAC,EAAE,CAAC;MAClB;IACJ;IAEA,IAAI;MACA,MAAMU,OAAO,GAAGjB,IAAI,CAACkB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,KAAK,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;MAC9F,IAAIJ,OAAO,CAACF,MAAM,KAAK,CAAC,EAAE;QACtBR,cAAc,CAAC,iDAAiD,CAAC;MACrE,CAAC,MAAM;QACHA,cAAc,CAAC,EAAE,CAAC;MACtB;MACAJ,gBAAgB,CAACc,OAAO,CAAC;IAC7B,CAAC,CAAC,OAAOb,KAAK,EAAE;MACZY,OAAO,CAACZ,KAAK,CAAC,oCAAoC,CAAC;MACnDG,cAAc,CAAC,oCAAoC,CAAC;IACxD;EACJ,CAAC,EAAE,CAACC,KAAK,EAAER,IAAI,CAAC,CAAC;EAEjB,MAAMuB,MAAM,GAAIf,KAAK,IAAK;IACtBC,QAAQ,CAACD,KAAK,CAAC;EACnB,CAAC;EAED,OAAO;IAAER,IAAI;IAAEE,aAAa;IAAEE,KAAK;IAAEE,WAAW;IAAEiB;EAAO,CAAC;AAC9D,CAAC;AAACxB,EAAA,CAxDWF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}