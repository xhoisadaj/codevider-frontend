{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFetch = apiPath => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const externalUrl = `https://freetestapi.com/api/v1/${apiPath}?limit=6`;\n    const localUrl = `http://localhost:5500/${apiPath}`;\n    async function fetchAnimals() {\n      try {\n        const [externalResponse, localResponse] = await Promise.all([fetch(externalUrl), fetch(localUrl)]);\n        const externalData = await externalResponse.json();\n        const localData = await localResponse.json();\n        const combinedData = [...externalData, ...localData];\n        if (combinedData.length === 0) {\n          setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n        } else {\n          setError(\"\");\n        }\n        setData(combinedData);\n      } catch (error) {\n        console.error(\"An error occurred while fetching data.\", error);\n        setError(\"An error occurred while fetching data.\");\n      }\n    }\n    fetchAnimals();\n  }, [apiPath]);\n  return {\n    data,\n    error\n  };\n};\n_s(useFetch, \"Sn8JI/qyNvYdvBYT/lUHpFvZwWQ=\");","map":{"version":3,"names":["useState","useEffect","useFetch","apiPath","_s","data","setData","error","setError","externalUrl","localUrl","fetchAnimals","externalResponse","localResponse","Promise","all","fetch","externalData","json","localData","combinedData","length","console"],"sources":["/Users/xhoanisadaj/Documents/projects/codevider-fullstack/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useFetch = (apiPath) => {\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(\"\");\n\n    useEffect(() => {\n        const externalUrl = `https://freetestapi.com/api/v1/${apiPath}?limit=6`;\n        const localUrl = `http://localhost:5500/${apiPath}`;\n\n        async function fetchAnimals() {\n            try {\n                const [externalResponse, localResponse] = await Promise.all([\n                    fetch(externalUrl),\n                    fetch(localUrl)\n                ]);\n\n                const externalData = await externalResponse.json();\n                const localData = await localResponse.json();\n\n                const combinedData = [...externalData, ...localData];\n\n                if (combinedData.length === 0) {\n                    setError(\"WE FOUND NOTHING FOR YOU! SEARCH SOMETHING ELSE\");\n                } else {\n                    setError(\"\");\n                }\n                setData(combinedData);\n            } catch (error) {\n                console.error(\"An error occurred while fetching data.\", error);\n                setError(\"An error occurred while fetching data.\");\n            }\n        }\n\n        fetchAnimals();\n    }, [apiPath]);\n\n    return { data, error };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,MAAMQ,WAAW,GAAG,kCAAkCN,OAAO,UAAU;IACvE,MAAMO,QAAQ,GAAG,yBAAyBP,OAAO,EAAE;IAEnD,eAAeQ,YAAYA,CAAA,EAAG;MAC1B,IAAI;QACA,MAAM,CAACC,gBAAgB,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxDC,KAAK,CAACP,WAAW,CAAC,EAClBO,KAAK,CAACN,QAAQ,CAAC,CAClB,CAAC;QAEF,MAAMO,YAAY,GAAG,MAAML,gBAAgB,CAACM,IAAI,CAAC,CAAC;QAClD,MAAMC,SAAS,GAAG,MAAMN,aAAa,CAACK,IAAI,CAAC,CAAC;QAE5C,MAAME,YAAY,GAAG,CAAC,GAAGH,YAAY,EAAE,GAAGE,SAAS,CAAC;QAEpD,IAAIC,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;UAC3Bb,QAAQ,CAAC,iDAAiD,CAAC;QAC/D,CAAC,MAAM;UACHA,QAAQ,CAAC,EAAE,CAAC;QAChB;QACAF,OAAO,CAACc,YAAY,CAAC;MACzB,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZe,OAAO,CAACf,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DC,QAAQ,CAAC,wCAAwC,CAAC;MACtD;IACJ;IAEAG,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,OAAO;IAAEE,IAAI;IAAEE;EAAM,CAAC;AAC1B,CAAC;AAACH,EAAA,CApCWF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}